// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatMsg.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class FileInfo;
@class MessageContent;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum ClientType

/**
 * =================================================================================================
 * 客户端类别
 * =================================================================================================
 **/
typedef GPB_ENUM(ClientType) {
  /** android客户端 */
  ClientType_Android = 1,

  /** 苹果客户端 */
  ClientType_Ios = 2,

  /** 网页客户端 */
  ClientType_Web = 3,

  /** 电脑CS客户端 */
  ClientType_Pc = 4,

  /** 其他客户端 */
  ClientType_Other = 5,
};

GPBEnumDescriptor *ClientType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ClientType_IsValidValue(int32_t value);

#pragma mark - Enum MessageType

/**
 * =================================================================================================
 * 消息类别
 * =================================================================================================
 **/
typedef GPB_ENUM(MessageType) {
  /** 心跳包 */
  MessageType_Heart = 1,

  /** 登录信息 */
  MessageType_Login = 2,

  /** 登录响应信息 */
  MessageType_Loginres = 3,

  /** 注销信息 */
  MessageType_Logout = 4,

  /** 获取在线列表及在线状态 */
  MessageType_Onlineusers = 5,

  /** 获取在线列表及在线状态响应消息 */
  MessageType_Onlineusersres = 6,

  /** 聊天信息 */
  MessageType_Chatmsg = 7,

  /** 聊天信息响应 */
  MessageType_Chatmsgres = 8,

  /** 视频聊天邀请 */
  MessageType_Videoinvite = 9,

  /** 视频聊天邀请响应 */
  MessageType_Videoinviteres = 10,

  /** 获取未读聊天消息分组统计信息(消息个数) */
  MessageType_Unreadmsg = 11,

  /** 聊天消息未读分组统计信息响应 */
  MessageType_Unreadmsgres = 12,

  /** 获取未读聊天消息请求(根据参数获取) */
  MessageType_Getunreadmsg = 13,

  /** 获取未读聊天消息响应,返回聊天消息 */
  MessageType_Getunreadmsgres = 14,

  /** 获取历史聊天记录(点击聊天面板最上面的查看更多历史记录,或者根据条件查询历史记录) */
  MessageType_Hismsg = 15,

  /** 返回历史聊天记录响应 */
  MessageType_Hismsgres = 16,

  /** 创建聊天分组 */
  MessageType_Creategroup = 17,

  /** 创建聊天分组响应结果 */
  MessageType_Creategroupres = 18,

  /** 删除聊天分组(删除后聊天分组相关消息记录全部会删除) */
  MessageType_Delgroup = 19,

  /** 删除聊天分组响应结果 */
  MessageType_Delgroupres = 20,

  /** 根据人员账号查询这个人所有的讨论组 */
  MessageType_Getgroups = 21,

  /** 返回当前登录人所有的讨论组 */
  MessageType_Getgroupsres = 22,

  /** 根据讨论组id查询讨论组下所有的人 */
  MessageType_Getgroupusers = 23,

  /** 返回讨论组下所有的人 */
  MessageType_Getgroupusersres = 24,
};

GPBEnumDescriptor *MessageType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL MessageType_IsValidValue(int32_t value);

#pragma mark - ChatMsgRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ChatMsgRoot : GPBRootObject
@end

#pragma mark - ChatMessage

typedef GPB_ENUM(ChatMessage_FieldNumber) {
  ChatMessage_FieldNumber_Token = 1,
  ChatMessage_FieldNumber_CType = 2,
  ChatMessage_FieldNumber_MsgType = 3,
  ChatMessage_FieldNumber_MsgPayload = 4,
  ChatMessage_FieldNumber_Extradata = 5,
};

/**
 * =================================================================================================
 * 交互消息
 * =================================================================================================
 **/
@interface ChatMessage : GPBMessage

/** JWT认证token */
@property(nonatomic, readwrite, copy, null_resettable) NSString *token;
/** Test to see if @c token has been set. */
@property(nonatomic, readwrite) BOOL hasToken;

/** 客户端类型 */
@property(nonatomic, readwrite) ClientType cType;

@property(nonatomic, readwrite) BOOL hasCType;
/** 消息类型 */
@property(nonatomic, readwrite) MessageType msgType;

@property(nonatomic, readwrite) BOOL hasMsgType;
/** 非心跳包时必须传 */
@property(nonatomic, readwrite, strong, null_resettable) MessageContent *msgPayload;
/** Test to see if @c msgPayload has been set. */
@property(nonatomic, readwrite) BOOL hasMsgPayload;

/** 附加信息,存放各种消息的响应json字符串 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *extradata;
/** Test to see if @c extradata has been set. */
@property(nonatomic, readwrite) BOOL hasExtradata;

@end

#pragma mark - MessageContent

typedef GPB_ENUM(MessageContent_FieldNumber) {
  MessageContent_FieldNumber_Content = 1,
  MessageContent_FieldNumber_OccureTime = 2,
  MessageContent_FieldNumber_SpeakerId = 3,
  MessageContent_FieldNumber_AudienceId = 4,
  MessageContent_FieldNumber_IsGroupChat = 5,
  MessageContent_FieldNumber_FilesArray = 6,
};

/**
 * =================================================================================================
 * 聊天消息体
 * =================================================================================================
 **/
@interface MessageContent : GPBMessage

/** 聊天内容(html 笑脸图标等) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *content;
/** Test to see if @c content has been set. */
@property(nonatomic, readwrite) BOOL hasContent;

/** 发送信息时间(客户端时间) */
@property(nonatomic, readwrite) uint64_t occureTime;

@property(nonatomic, readwrite) BOOL hasOccureTime;
/** 发信息人id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *speakerId;
/** Test to see if @c speakerId has been set. */
@property(nonatomic, readwrite) BOOL hasSpeakerId;

/** 收信息人id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *audienceId;
/** Test to see if @c audienceId has been set. */
@property(nonatomic, readwrite) BOOL hasAudienceId;

/** 是否为群聊(1:群聊,0:私聊) */
@property(nonatomic, readwrite) int32_t isGroupChat;

@property(nonatomic, readwrite) BOOL hasIsGroupChat;
/** 图片数据片段 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<FileInfo*> *filesArray;
/** The number of items in @c filesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger filesArray_Count;

@end

#pragma mark - FileInfo

typedef GPB_ENUM(FileInfo_FieldNumber) {
  FileInfo_FieldNumber_FileName = 1,
  FileInfo_FieldNumber_FilePayLoad = 2,
  FileInfo_FieldNumber_Desc = 3,
  FileInfo_FieldNumber_Extradata = 4,
};

/**
 * =================================================================================================
 * 文件等二进制数据
 * =================================================================================================
 **/
@interface FileInfo : GPBMessage

/** 文件名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fileName;
/** Test to see if @c fileName has been set. */
@property(nonatomic, readwrite) BOOL hasFileName;

/** 二进制文件 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *filePayLoad;
/** Test to see if @c filePayLoad has been set. */
@property(nonatomic, readwrite) BOOL hasFilePayLoad;

/** 描述信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *desc;
/** Test to see if @c desc has been set. */
@property(nonatomic, readwrite) BOOL hasDesc;

/** 附加信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *extradata;
/** Test to see if @c extradata has been set. */
@property(nonatomic, readwrite) BOOL hasExtradata;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
